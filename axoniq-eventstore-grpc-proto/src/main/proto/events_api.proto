syntax = "proto3";
package io.axoniq.eventstore.grpc;
import "messages.proto";
option java_multiple_files = true;


service EventWriter {

    // Accepts a stream of Events returning a Confirmation when completed.
    rpc AppendEvent ( stream EventWithContext) returns (Confirmation) {
    }
    // Accepts a Snapshot event returning a Confirmation when completed.
    rpc AppendSnapshot ( EventWithContext) returns (Confirmation) {
    }

}

service EventReader {

    // Retrieves the Eevents for a given aggregate. Results are streamed rather than returned at once.
    rpc ListAggregateEvents (GetAggregateEventsRequest) returns (stream Event) {
    }

    // Retrieves the Events from a given tracking token. Results are streamed rather than returned at once.
    rpc ListEvents (stream GetEventsRequest) returns (stream EventWithToken) {
    }

    // Gets the highest sequence number for a specific aggregate.
    rpc ReadHighestSequenceNr( ReadHighestSequenceNrRequest ) returns (ReadHighestSequenceNrResponse) {}
}

service Cluster {
    rpc Join(JoinRequest) returns (stream MasterInfo) {
    }
}

message ReadHighestSequenceNrRequest {
    string aggregate_id = 1;
    string context = 2;
    int64 from_sequence_nr = 3;
}

message ReadHighestSequenceNrResponse {
    int64 to_sequence_nr = 1;
}

service Cluster {
    rpc Join(JoinRequest) returns (stream MasterInfo) {
    }
}

message MasterInfo {
    string host_name = 1;
    int32 grpc_port = 2;
    int32 http_port = 3;
    int32 version = 4;
}

message JoinRequest {

}

message Confirmation {
    bool success = 1;
}

message GetAggregateEventsRequest {
    string aggregate_id = 1;
    string context = 2;
}

message GetEventsRequest {
    int64 tracking_token = 1;
    int64 number_of_permits = 2;
    string context = 3;
}

message EventWithContext {
    Event event = 1;
    string context = 2;
}